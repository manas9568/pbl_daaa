version: '3.8'

services:
  # MongoDB
  mongodb:
    image: mongo:7.0
    container_name: bookmyshow-mongodb-prod
    restart: always
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_PASSWORD}
      MONGO_INITDB_DATABASE: bookmyshow
    volumes:
      - mongodb_prod_data:/data/db
    networks:
      - bookmyshow-prod-network

  # Redis
  redis:
    image: redis:7.2-alpine
    container_name: bookmyshow-redis-prod
    restart: always
    ports:
      - "6379:6379"
    command: redis-server --requirepass ${REDIS_PASSWORD} --appendonly yes
    volumes:
      - redis_prod_data:/data
    networks:
      - bookmyshow-prod-network

  # Zookeeper
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: bookmyshow-zookeeper-prod
    restart: always
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - bookmyshow-prod-network

  # Kafka
  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: bookmyshow-kafka-prod
    restart: always
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - bookmyshow-prod-network

  # Backend
  backend:
    build: 
      context: ./backend
      dockerfile: Dockerfile.prod
    container_name: bookmyshow-backend-prod
    restart: always
    ports:
      - "5000:5000"
    environment:
      NODE_ENV: production
      PORT: 5000
      MONGODB_URI: mongodb://${MONGO_USERNAME}:${MONGO_PASSWORD}@mongodb:27017/bookmyshow?authSource=admin
      JWT_SECRET: ${JWT_SECRET}
      JWT_EXPIRE: ${JWT_EXPIRE}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      KAFKA_BROKERS: kafka:9092
      KAFKA_CLIENT_ID: ${KAFKA_CLIENT_ID}
      FRONTEND_URL: ${FRONTEND_URL}
      RAZORPAY_KEY_ID: ${RAZORPAY_KEY_ID}
      RAZORPAY_KEY_SECRET: ${RAZORPAY_KEY_SECRET}
      EMAIL_HOST: ${EMAIL_HOST}
      EMAIL_PORT: ${EMAIL_PORT}
      EMAIL_USER: ${EMAIL_USER}
      EMAIL_PASS: ${EMAIL_PASS}
    depends_on:
      - mongodb
      - redis
      - kafka
    networks:
      - bookmyshow-prod-network

  # Frontend
  frontend:
    build: 
      context: ./frontend
      dockerfile: Dockerfile.prod
    container_name: bookmyshow-frontend-prod
    restart: always
    ports:
      - "3000:3000"
    environment:
      NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL}
      NEXT_PUBLIC_WS_URL: ${NEXT_PUBLIC_WS_URL}
      NEXT_PUBLIC_RAZORPAY_KEY_ID: ${NEXT_PUBLIC_RAZORPAY_KEY_ID}
    depends_on:
      - backend
    networks:
      - bookmyshow-prod-network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: bookmyshow-nginx-prod
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - frontend
      - backend
    networks:
      - bookmyshow-prod-network

volumes:
  mongodb_prod_data:
  redis_prod_data:

networks:
  bookmyshow-prod-network:
    driver: bridge
