version: '3.8'

services:
  # MongoDB
  mongodb:
    image: mongo:7.0
    container_name: bookmyshow-mongodb
    restart: unless-stopped
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password123
      MONGO_INITDB_DATABASE: bookmyshow
    volumes:
      - mongodb_data:/data/db
    networks:
      - bookmyshow-network

  # Redis
  redis:
    image: redis:7.2-alpine
    container_name: bookmyshow-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    networks:
      - bookmyshow-network

  # Zookeeper (required for Kafka)
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: bookmyshow-zookeeper
    restart: unless-stopped
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - bookmyshow-network

  # Kafka
  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: bookmyshow-kafka
    restart: unless-stopped
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    networks:
      - bookmyshow-network

  # Backend
  backend:
    build: ./backend
    container_name: bookmyshow-backend
    restart: unless-stopped
    ports:
      - "5000:5000"
    environment:
      NODE_ENV: development
      PORT: 5000
      MONGODB_URI: mongodb://admin:password123@mongodb:27017/bookmyshow?authSource=admin
      JWT_SECRET: your_super_secret_jwt_key_here_make_it_long_and_complex
      JWT_EXPIRE: 7d
      REDIS_HOST: redis
      REDIS_PORT: 6379
      KAFKA_BROKERS: kafka:9092
      KAFKA_CLIENT_ID: bookmyshow-backend
      FRONTEND_URL: http://localhost:3000
    depends_on:
      - mongodb
      - redis
      - kafka
    volumes:
      - ./backend:/app
      - /app/node_modules
    networks:
      - bookmyshow-network

  # Frontend
  frontend:
    build: ./frontend
    container_name: bookmyshow-frontend
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      NEXT_PUBLIC_API_URL: http://localhost:5000
      NEXT_PUBLIC_WS_URL: http://localhost:5000
    depends_on:
      - backend
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next
    networks:
      - bookmyshow-network

volumes:
  mongodb_data:
  redis_data:

networks:
  bookmyshow-network:
    driver: bridge
